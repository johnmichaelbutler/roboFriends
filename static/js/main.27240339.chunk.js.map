{"version":3,"sources":["serviceWorker.js","redux/types.js","redux/actions.js","api/api.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","redux/reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ActionTypes","fetchRobotsStartAsync","dispatch","link","type","fetch","response","json","data","fetchRobotsSuccess","fetchRobotsFailure","robots","payload","errorMessage","React","memo","className","Card","props","name","email","id","src","alt","CardList","map","user","i","key","SearchBox","searchChange","placeholder","onChange","aria-label","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","this","Component","connect","searchField","searchRobots","requestRobots","isFetching","setSearchField","event","text","target","value","onFetchRobots","useEffect","filteredRobot","filter","robot","toLowerCase","includes","initialStateSearch","initialStateRobots","errorMessaage","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.27240339.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const ActionTypes = {\n  CHANGE_SEARCH_FIELD : 'CHANGE_SEARCH_FIELD',\n  FETCH_ROBOTS_START : 'FETCH_ROBOTS_START',\n  FETCH_ROBOTS_SUCCESS : 'FETCH_ROBOTS_SUCCESS',\n  FETCH_ROBOTS_FAILURE : 'FETCH_ROBOTS_FAILURE'\n};\n","import { ActionTypes } from './types'\nimport { apiCall } from '../api/api';\n\nexport const setReduxSearchField = (text) => ({\n  type: ActionTypes.CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const fetchRobotsStart = () => ({\n  type: ActionTypes.FETCH_ROBOTS_START\n})\n\nexport const fetchRobotsStartAsync = () => (dispatch) => {\n    dispatch(fetchRobotsStart());\n    apiCall(`https://jsonplaceholder.typicode.com/users`)\n      .then(data => dispatch(fetchRobotsSuccess(data)))\n      .catch(error => dispatch(fetchRobotsFailure(error)))\n}\n\nexport const fetchRobotsSuccess = robots => ({\n  type: ActionTypes.FETCH_ROBOTS_SUCCESS,\n  payload: robots\n});\n\nexport const fetchRobotsFailure = errorMessage => ({\n  type: ActionTypes.FETCH_ROBOTS_FAILURE,\n  payload: errorMessage\n})\n","export const apiCall = (link) =>\n  fetch(link).then(response => response.json());","import React from 'react';\n\nconst Header = () => {\nreturn <h1 className='f1'>RoboFriends</h1>\n};\n\nexport default React.memo(Header);","import React from 'react';\nimport 'tachyons';\n\nconst Card = (props) => {\n  const { name, email, id } = props;\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n  console.log(\"Cardlist\");\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={user.id}\n              name={user.name}\n              email={user.email}\n            />\n          )\n        })\n      }\n    </div>\n  )\n};\n\nexport default CardList","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  console.log(\"SearchBox\")\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search Robots'\n        onChange={searchChange}\n        aria-label=\"Search Robots\"\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      hasError: false\n    }\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true }\n  }\n\n  componentDidCatch(error) {\n    console.log(error);\n  }\n\n  render() {\n    if(this.state.hasError){\n      return <h1>Ooops. That is not good</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React, { useEffect } from 'react';\nimport { setReduxSearchField, fetchRobotsStartAsync } from '../redux/actions';\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport './App.css';\n\nconst App = (props) => {\n  const { searchField, setSearchField, onFetchRobots, robots, isFetching } = props;\n\n  useEffect(() => {\n    onFetchRobots();\n  }, [onFetchRobots]);\n\n  const filteredRobot = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  })\n\n\n  return isFetching ? <h1 className='f1 tc'>Loading</h1>\n    : (\n    <div className='tc'>\n      <Header />\n      <SearchBox searchField={searchField} searchChange={setSearchField} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobot} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  )\n};\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isFetching: state.requestRobots.isFetching,\n    errorMessage: state.requestRobots.errorMessage\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setSearchField: (event) => dispatch(setReduxSearchField(event.target.value)),\n    onFetchRobots: () => dispatch(fetchRobotsStartAsync())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { ActionTypes } from './types';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isFetching: false,\n  errorMessaage: null\n}\n\nexport const searchRobots = (state = initialStateSearch, action={}) => {\n  switch(action.type) {\n    case ActionTypes.CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload\n      }\n\n    default:\n      return state\n  }\n}\n\nexport const requestRobots = (state = initialStateRobots, action={}) => {\n  switch(action.type) {\n    case ActionTypes.FETCH_ROBOTS_START:\n      return {\n        ...state,\n        isFetching: true\n      }\n\n    case ActionTypes.FETCH_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        robots: action.payload,\n        isFetching: false\n      }\n\n    case ActionTypes.FETCH_ROBOTS_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        errorMessage: action.payload\n      }\n\n      default:\n        return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { logger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './redux/reducers';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}